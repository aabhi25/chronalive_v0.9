import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Users, Clock, BookOpen, AlertTriangle, CheckCircle2, XCircle } from "lucide-react";

interface PendingSubstitution {
  id: string;
  originalTeacherId: string;
  substituteTeacherId?: string;
  timetableEntryId: string;
  date: string;
  reason: string;
  status: "pending";
  isAutoGenerated: boolean;
  originalTeacherName: string;
  substituteTeacherName?: string;
  className: string;
  subjectName: string;
  day: string;
  period: number;
  startTime: string;
  endTime: string;
}

interface SubstitutionNotificationsProps {
  classId?: string;
  selectedDate?: string;
}

export default function SubstitutionNotifications({ 
  classId, 
  selectedDate 
}: SubstitutionNotificationsProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const [processingSubstitutions, setProcessingSubstitutions] = useState<Set<string>>(new Set());

  const currentDate = selectedDate || new Date().toISOString().split('T')[0];

  // Only show for admin users
  if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {
    return null;
  }

  // Fetch pending substitutions
  const { data: pendingSubstitutions = [], isLoading, error } = useQuery({
    queryKey: ["pending-substitutions", user?.schoolId, currentDate],
    queryFn: async () => {
      if (!user?.schoolId) return [];
      
      const params = new URLSearchParams({
        schoolId: user.schoolId,
        date: currentDate  // Add date parameter for server-side filtering
      });
      
      const response = await apiRequest("GET", `/api/substitutions/pending?${params}`);
      return response.json();
    },
    enabled: !!user?.schoolId,
    refetchInterval: 10000, // Refresh every 10 seconds for updates
  });

  // Approve substitution mutation
  const approveMutation = useMutation({
    mutationFn: async (substitutionId: string) => {
      const response = await apiRequest("POST", `/api/substitutions/${substitutionId}/approve`);
      return response.json();
    },
    onMutate: (substitutionId) => {
      setProcessingSubstitutions(prev => new Set([...Array.from(prev), substitutionId]));
    },
    onSuccess: (data, substitutionId) => {
      toast({
        title: "Substitution Approved",
        description: "The substitute teacher has been assigned to the timetable.",
        variant: "default"
      });
      setProcessingSubstitutions(prev => {
        const newSet = new Set(prev);
        newSet.delete(substitutionId);
        return newSet;
      });
      // Refresh data - invalidate all related queries
      queryClient.invalidateQueries({ queryKey: ["pending-substitutions"] });
      queryClient.invalidateQueries({ queryKey: ["rejected-substitutions"] });
      queryClient.invalidateQueries({ queryKey: ["substitutions"] });
      queryClient.invalidateQueries({ queryKey: ["/api/timetable/weekly"] });
      queryClient.invalidateQueries({ queryKey: ["/api/timetable/detailed"] });
    },
    onError: (error, substitutionId) => {
      toast({
        title: "Approval Failed",
        description: "Failed to approve the substitution. Please try again.",
        variant: "destructive"
      });
      setProcessingSubstitutions(prev => {
        const newSet = new Set(prev);
        newSet.delete(substitutionId);
        return newSet;
      });
    }
  });

  // Reject substitution mutation
  const rejectMutation = useMutation({
    mutationFn: async (substitutionId: string) => {
      const response = await apiRequest("POST", `/api/substitutions/${substitutionId}/reject`);
      return response.json();
    },
    onMutate: (substitutionId) => {
      setProcessingSubstitutions(prev => new Set([...Array.from(prev), substitutionId]));
    },
    onSuccess: (data, substitutionId) => {
      toast({
        title: "Substitution Rejected",
        description: "The substitution request has been rejected.",
        variant: "default"
      });
      setProcessingSubstitutions(prev => {
        const newSet = new Set(prev);
        newSet.delete(substitutionId);
        return newSet;
      });
      // Refresh data - invalidate all related queries
      queryClient.invalidateQueries({ queryKey: ["pending-substitutions"] });
      queryClient.invalidateQueries({ queryKey: ["rejected-substitutions"] });
      queryClient.invalidateQueries({ queryKey: ["substitutions"] });
    },
    onError: (error, substitutionId) => {
      toast({
        title: "Rejection Failed",
        description: "Failed to reject the substitution. Please try again.",
        variant: "destructive"
      });
      setProcessingSubstitutions(prev => {
        const newSet = new Set(prev);
        newSet.delete(substitutionId);
        return newSet;
      });
    }
  });

  // Server-side filtering by date is now handled in the API call

  // Loading state
  if (isLoading) {
    return (
      <Card className="mb-4">
        <CardContent className="p-4">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Clock className="h-4 w-4 animate-spin" />
            Loading substitution notifications...
          </div>
        </CardContent>
      </Card>
    );
  }

  // Error state
  if (error) {
    return (
      <Alert className="mb-4" variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          Failed to load substitution notifications. Please refresh the page.
        </AlertDescription>
      </Alert>
    );
  }

  // No pending substitutions
  if (pendingSubstitutions.length === 0) {
    return null;
  }

  return (
    <div className="mb-6 space-y-3">
      <div className="flex items-center gap-2">
        <AlertTriangle className="h-5 w-5 text-orange-500" />
        <h3 className="font-medium text-lg">Pending Substitution Approvals</h3>
        <Badge variant="outline" className="bg-orange-50 text-orange-700 border-orange-200">
          {pendingSubstitutions.length} pending
        </Badge>
      </div>

      {pendingSubstitutions.map((substitution: PendingSubstitution) => (
        <Alert key={substitution.id} className="border-orange-200 bg-orange-50/50">
          <div className="flex items-start justify-between w-full">
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-2">
                <Users className="h-4 w-4 text-orange-600" />
                <span className="font-medium text-orange-900">
                  Teacher Substitution Required
                </span>
                <Badge className="bg-orange-100 text-orange-800 border-orange-300">
                  {substitution.day.charAt(0).toUpperCase() + substitution.day.slice(1)}
                </Badge>
                <Badge variant="outline" className="bg-blue-50 text-blue-700">
                  Period {substitution.period}
                </Badge>
              </div>

              <AlertDescription className="text-sm text-gray-700 mb-3">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <BookOpen className="h-3 w-3 text-gray-500" />
                      <span className="font-medium">Class:</span> {substitution.className}
                    </div>
                    <div className="flex items-center gap-2">
                      <BookOpen className="h-3 w-3 text-gray-500" />
                      <span className="font-medium">Subject:</span> {substitution.subjectName}
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="h-3 w-3 text-gray-500" />
                      <span className="font-medium">Time:</span> {substitution.startTime} - {substitution.endTime}
                    </div>
                  </div>
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Users className="h-3 w-3 text-red-500" />
                      <span className="font-medium">Absent Teacher:</span> {substitution.originalTeacherName}
                    </div>
                    {substitution.substituteTeacherName ? (
                      <div className="flex items-center gap-2">
                        <Users className="h-3 w-3 text-green-500" />
                        <span className="font-medium">Suggested Substitute:</span> {substitution.substituteTeacherName}
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        <AlertTriangle className="h-3 w-3 text-orange-500" />
                        <span className="font-medium text-orange-700">No substitute suggested</span>
                      </div>
                    )}
                  </div>
                </div>
                
                {substitution.reason && (
                  <div className="mt-2 p-2 bg-white/50 rounded text-xs">
                    <strong>Reason:</strong> {substitution.reason}
                  </div>
                )}
              </AlertDescription>
            </div>

            <div className="flex items-center gap-2 ml-4">
              {substitution.substituteTeacherName && (
                <Button
                  size="sm"
                  onClick={() => approveMutation.mutate(substitution.id)}
                  disabled={processingSubstitutions.has(substitution.id)}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  {processingSubstitutions.has(substitution.id) ? (
                    <Clock className="h-3 w-3 mr-1 animate-spin" />
                  ) : (
                    <CheckCircle2 className="h-3 w-3 mr-1" />
                  )}
                  Approve
                </Button>
              )}
              
              <Button
                size="sm"
                variant="outline"
                onClick={() => rejectMutation.mutate(substitution.id)}
                disabled={processingSubstitutions.has(substitution.id)}
                className="border-red-300 text-red-600 hover:bg-red-50"
              >
                {processingSubstitutions.has(substitution.id) ? (
                  <Clock className="h-3 w-3 mr-1 animate-spin" />
                ) : (
                  <XCircle className="h-3 w-3 mr-1" />
                )}
                Reject
              </Button>
            </div>
          </div>
        </Alert>
      ))}
    </div>
  );
}